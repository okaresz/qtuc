qcPlot:
	mi van a timestampekkel? miért ragyás a plot?
	ne kezdjen logolni a var, amíg nincs plot. (logHistory false default)
	
qcClientBase

in general, improve reusability and extensibility for developers (virtual functions, modularity, ...)

if device removed, high cpu usage?! -> QtSerialPort bug, or even lower (moserial also)

document device greeting message

"desc" <=> "description" device info ambiguity

Implement command line arguments to SettingsManager, considering the possible future feature to define all settings also on the command line.
 -> clean up passThrough mode behaviour: todo -s! (command deny, etc...)

proxy: desktop integration command line switch
	tray icon
	menu:
		info: listening on port x or conn to gui..., device status, gui status
		quit button -> deinit gui, device, then exit

command line switch to save settings in the current dir (portable option features: what else?)

track device connection
	int member in statevar: get request: +1, set receive: -1. if >0, connection problem -> what to do with auto set commands from device?
	heartbeat with packet id -> reply with same id, separate class for handling heartbeat messages and special command
	
handling of different encodings with settings and deviceAPI files. Reading encoding tag from xml?

autoUpdater:
	DeviceAPI::update() interference?

ctrl+c on proxy while live client connection, double delete???


http://blog.codeimproved.net/2010/03/logging-in-qt-land/
 
error():
	use Q_FUNC or similar macro instead of the hardcoded function names
	would be nice to include __LINE__ and __FILE__, maybe with an error macro
	timestamping all errors and info
	log (infos as well! ->so the whole stdout
	http://www.qtcentre.org/threads/19534-redirect-qDebug%28%29-to-file

make a qcInfo() function or something to print state info to stdout (always printed, independent of verbopsity or debuglevel)
	-> add a verbosity level, level 1 (-v) will be debugLevelInfo, and so on...
	timestamp!

global optimization
	use compiler optimization
	volatile, inline, ...
	manual code optimization for speed, starting on the critical parts
	-> code profiling?...

don't subscribe if var is write-only (or sg like this...)

Figure out some sane Packet and command deletion plan...
	all packets and commands are deleted by sendPacket and send* functions
	incoming packets and commands are deleted after use: packets are when commands are detached from them, commands are at higher level...
	document this.

check and implement the device-safe string handling at receiving/sending commands
check QObject parents
check destructor chains, proper object deletions

implement connection lost detection

USE INIT FUNCTIONS
if multiple constructors exist, you will always forget to update one of them... (if some modifications needed in the common c'tor code)

doc todo-s

write a short how-to use for every class doc.

check whole code for memleaks

"All the QObjects derived classes which will become child of any object in your program should be on heap. "

delete all member object instances, created with new in constructors.

validate deviceAPI.xml! : http://doc.qt.digia.com/4.7/xmlpatterns-schema.html

packet/commandClass chaos...

------------------
QtSerialPort building:

just build it.
for debug build, change QT.serialport.name to SerialPortd in src/serialport/serialport.pri
	this will be both the .so file name and the SONAME, which you can read with readelf -d <so file>
copy somewhere, where the linker can find it. both compile- and runtime.
